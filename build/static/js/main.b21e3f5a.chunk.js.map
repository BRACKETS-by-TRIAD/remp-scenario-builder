{"version":3,"sources":["components/widgets/TrayWidget.js","components/elements/SimplePortFactory.js","components/elements/Ports/LeftRightPort.js","components/elements/Ports/LeftRightBottomPort.js","components/elements/Action/PortModel.js","components/elements/Action/NodeModel.js","components/elements/Action/NodeWidget.js","components/elements/Action/NodeFactory.js","components/elements/Segment/PortModel.js","components/elements/Segment/NodeModel.js","components/elements/Segment/NodeWidget.js","components/elements/Segment/NodeFactory.js","components/elements/Trigger/PortModel.js","components/elements/Trigger/NodeModel.js","components/elements/Trigger/NodeWidget.js","components/elements/Trigger/NodeFactory.js","components/elements/Wait/PortModel.js","components/elements/Wait/NodeModel.js","components/elements/Wait/NodeWidget.js","components/elements/Wait/NodeFactory.js","components/Application.js","components/widgets/TrayItemWidget.js","components/widgets/BodyWidget.js","App.js","serviceWorker.js","index.js"],"names":["TrayWidget","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react","className","children","React","defaultProps","SimplePortFactory","_AbstractPortFactory","type","cb","initialConfig","AbstractPortFactory","LeftRightPort","_BasePortModel","pos","arguments","length","undefined","position","in","port","link","createLinkModel","setSourcePort","setTargetPort","_","get","prototype","data","engine","DefaultLinkModel","BasePortModel","LeftRightBottomPort","PortModel","_LeftRightPort","NodeModel","_BaseNodeModel","element","name","title","addPort","BaseNodeModel","NodeWidget","selector","classBaseName","getClassName","style","background","node","color","bem","main","NodeFactory","_AbstractNodeFactory","diagramEngine","NodeWidget_NodeWidget","AbstractNodeFactory","_LeftRightBottomPort","Segment_NodeWidget_NodeWidget","Trigger_NodeWidget_NodeWidget","Wait_NodeWidget_NodeWidget","Application","DiagramEngine","installDefaultFactories","activeModel","DiagramModel","payload","triggers","id","event","elements","wait","minutes","descendants","segment","code","descendants_positive","descendants_negative","action","email","visual","abcd","x","y","abcd1","abcd2","abcd3","registerModels","renderPayload","setDiagramModel","registerPortFactory","config","Action","registerNodeFactory","Segment","Trigger","Wait","trigger","triggerVisual","triggerNode","setPosition","elementNodes","map","links","getPort","concat","toConsumableArray","forEach","model","LinkModel","addLink","addNode","TrayItemWidget","_this2","borderColor","draggable","onDragStart","dataTransfer","setData","JSON","stringify","BodyWidget","cloneSelected","app","getDiagramEngine","offset","getDiagramModel","itemMap","getSelectedItems","item","newItem","clone","getPoints","p","updateLocation","getX","getY","selected","forceUpdate","diagramProps","maxNumberPointsPerLink","allowLooseLinks","onClick","zoomToFit","TrayWidget_TrayWidget","TrayItemWidget_TrayItemWidget","onDrop","parse","getData","nodesCount","getNodes","points","getRelativeMousePoint","onDragOver","preventDefault","App","react_default","a","createElement","BodyWidget_BodyWidget","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b21e3f5a.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface TrayWidgetProps {}\nexport interface TrayWidgetState {}\n\n\nexport class TrayWidget extends React.Component<TrayWidgetProps, TrayWidgetState> {\n\tstatic defaultProps: TrayWidgetProps = {};\n\n\tconstructor(props: TrayWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn <div className=\"tray\">{this.props.children}</div>;\n\t}\n}\n","import { \n\tPortModel, \n\tAbstractPortFactory \n} from \"storm-react-diagrams\";\n\nexport class SimplePortFactory extends AbstractPortFactory {\n\tcb: (initialConfig?: any) => PortModel;\n\n\tconstructor(type: string, cb: (initialConfig?: any) => PortModel) {\n\t\tsuper(type);\n\t\tthis.cb = cb;\n\t}\n\n\tgetNewInstance(initialConfig?: any): PortModel {\n\t\treturn this.cb(initialConfig);\n\t}\n}\n","import * as _ from \"lodash\";\nimport { \n\tLinkModel, \n\tDiagramEngine, \n\tPortModel as BasePortModel, \n\tDefaultLinkModel \n} from \"storm-react-diagrams\";\n\nexport class LeftRightPort extends BasePortModel {\n\tin: boolean;\n\tposition: string | \"left\" | \"right\";\n\n\tconstructor(pos: string = \"left\", type: string) {\n        super(pos, type);\n        \n\t\tthis.position = pos;\n\t\tthis.in = this.position ===  \"left\";\n\t}\n\t\n\tlink(port: BasePortModel): LinkModel {\n\t\tlet link = this.createLinkModel();\n\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\n\t\treturn link;\n\t}\n\n\tcanLinkToPort(port: BasePortModel): boolean {\n\t\treturn this.in !== port.in;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tposition: this.position\n\t\t});\n\t}\n\n\tdeSerialize(data: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(data, engine);\n\t\tthis.position = data.position;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n}\n","import * as _ from \"lodash\";\nimport { \n\tLinkModel, \n\tDiagramEngine, \n\tPortModel as BasePortModel, \n\tDefaultLinkModel \n} from \"storm-react-diagrams\";\n\nexport class LeftRightBottomPort extends BasePortModel {\n\tposition: string | \"top\" | \"bottom\" | \"left\" | \"right\";\n\n\tconstructor(pos: string = \"top\", type: string) {\n\t\tsuper(pos, type);\n\t\tthis.position = pos;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tposition: this.position\n\t\t});\n\t}\n\n\tdeSerialize(data: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(data, engine);\n\t\tthis.position = data.position;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n}\n","import { LeftRightPort } from './../Ports';\n\nexport class PortModel extends LeftRightPort {\t\n\tconstructor(position: string = \"left\") {\n\t\tsuper(position, 'action');\n\t}\n}\n","import { NodeModel as BaseNodeModel } from \"storm-react-diagrams\";\nimport { PortModel } from \"./PortModel\";\n\nexport class NodeModel extends BaseNodeModel {\n\tconstructor(element: object) {\n\t\tsuper(\"action\");\n\t\t\n\t\tthis.name = element.title || 'Action';\n\t\tthis.addPort(new PortModel(\"left\"));\n\t\tthis.addPort(new PortModel(\"right\"));\n\t}\n}\n","import * as React from \"react\";\nimport { PortWidget, DefaultPortLabel } from \"storm-react-diagrams\";\nimport { NodeModel } from \"./NodeModel\";\n\n\nexport interface NodeWidgetProps {\n\tnode: NodeModel;\n\tclassName: string;\n\tclassBaseName: string;\n}\n\nexport interface NodeWidgetState {}\n\nexport class NodeWidget extends React.Component<NodeWidgetProps, NodeWidgetState> {\n\tstatic defaultProps: NodeWidgetProps = {\n\t\tnode: null\n\t};\n\n\tconstructor(props: NodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tbem(selector: string): string {\n\t\treturn this.props.classBaseName + selector + \" \" + this.props.className + selector + \" \";\n\t}\n\n\tgetClassName() {\n\t\treturn this.props.classBaseName + \" \" +this.props.className;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.getClassName()} \n\t\t\t\tstyle={{ background: this.props.node.color }}>\t\t\t\t\n\t\t\t\t<div className=\"node-container\">\n\t\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t\t<div className={this.bem(\"__left\")}>\n\n\t\t\t\t\t\t\t<PortWidget name=\"left\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={this.bem(\"__right\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"right\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import {\n\tAbstractNodeFactory,\n\tDiagramEngine\n} from \"storm-react-diagrams\";\n\nimport { NodeWidget } from \"./NodeWidget\";\nimport { NodeModel } from \"./NodeModel\";\nimport * as React from \"react\";\n\nexport class NodeFactory extends AbstractNodeFactory {\n\tconstructor() {\n\t\tsuper(\"action\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: NodeModel): JSX.Element {\n\t\treturn <NodeWidget node={node} classBaseName=\"square-node\" className=\"action-node\" />;\n\t}\n\n\tgetNewInstance() {\n\t\treturn new NodeModel();\n\t}\n}\n","import * as _ from \"lodash\";\nimport { LeftRightBottomPort} from './../Ports';\n\nexport class PortModel extends LeftRightBottomPort {\n\tconstructor(position: string = \"top\") {\n\t\tsuper(position, 'segment');\n\t}\n}\n","import { NodeModel as BaseNodeModel } from \"storm-react-diagrams\";\nimport { PortModel } from \"./PortModel\";\n\nexport class NodeModel extends BaseNodeModel {\n\tconstructor(element: object) {\n\t\tsuper(\"segment\");\n\n\t\tthis.name = element.title || 'Segment';\n\t\t// this.addPort(new PortModel(\"top\"));\n\t\tthis.addPort(new PortModel(\"left\"));\n\t\tthis.addPort(new PortModel(\"bottom\"));\n\t\tthis.addPort(new PortModel(\"right\"));\n\t}\n}\n","import * as React from \"react\";\nimport { NodeModel } from \"./NodeModel\";\nimport { PortWidget } from \"storm-react-diagrams\";\n\nexport interface NodeWidgetProps {\n\tnode: NodeModel;\n}\n\nexport interface NodeWidgetState {}\n\nexport class NodeWidget extends React.Component<NodeWidgetProps, NodeWidgetState> {\n\tstatic defaultProps: NodeWidgetProps = {\n\t\tnode: null\n\t};\n\n\tconstructor(props: NodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tbem(selector: string): string {\n\t\treturn this.props.classBaseName + selector + \" \" + this.props.className + selector + \" \";\n\t}\n\n\tgetClassName() {\n\t\treturn this.props.classBaseName + \" \" +this.props.className;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.getClassName()} \n\t\t\t\tstyle={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"node-container\">\n\t\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t\t<div className={this.bem(\"__left\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"left\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className={this.bem(\"__right\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"right\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className={this.bem(\"__bottom\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"bottom\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import {\n\tAbstractNodeFactory,\n\tDiagramEngine,\n\tNodeModel as BaseNodeModel\n} from \"storm-react-diagrams\";\n\nimport { NodeWidget } from \"./NodeWidget\";\nimport { NodeModel } from \"./NodeModel\";\nimport * as React from \"react\";\n\nexport class NodeFactory extends AbstractNodeFactory {\n\tconstructor() {\n\t\tsuper(\"segment\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: BaseNodeModel): JSX.Element {\n\t\treturn <NodeWidget node={node} classBaseName=\"diamond-node\" className=\"segment-node\" />;\n\t}\n\n\tgetNewInstance() {\n\t\treturn new NodeModel();\n\t}\n}\n","import { LeftRightPort } from './../Ports';\n\nexport class PortModel extends LeftRightPort {\t\n\tconstructor(position: string = \"left\") {\n\t\tsuper(position, 'trigger');\n\t}\n}\n","import { NodeModel as BaseNodeModel } from \"storm-react-diagrams\";\nimport { PortModel } from \"./PortModel\";\n\nexport class NodeModel extends BaseNodeModel {\n\tconstructor(element: object) {\n\t\tsuper(\"trigger\");\n\t\t\n\t\tthis.name = element.title || 'Trigger';\n\t\tthis.addPort(new PortModel(\"right\"));\n\t}\n}\n","import * as React from \"react\";\nimport { PortWidget, DefaultPortLabel } from \"storm-react-diagrams\";\nimport { NodeModel } from \"./NodeModel\";\n\n\nexport interface NodeWidgetProps {\n\tnode: NodeModel;\n\tclassName: string;\n\tclassBaseName: string;\n}\n\nexport interface NodeWidgetState {}\n\nexport class NodeWidget extends React.Component<NodeWidgetProps, NodeWidgetState> {\n\tstatic defaultProps: NodeWidgetProps = {\n\t\tnode: null\n\t};\n\n\tconstructor(props: NodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tbem(selector: string): string {\n\t\treturn this.props.classBaseName + selector + \" \" + this.props.className + selector + \" \";\n\t}\n\n\tgetClassName() {\n\t\treturn this.props.classBaseName + \" \" +this.props.className;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.getClassName()} \n\t\t\t\tstyle={{ background: this.props.node.color }}>\t\t\t\t\n\t\t\t\t<div className=\"node-container\">\n\t\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t\t<div className={this.bem(\"__right\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"right\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import {\n\tAbstractNodeFactory,\n\tDiagramEngine\n} from \"storm-react-diagrams\";\n\nimport { NodeWidget } from \"./NodeWidget\";\nimport { NodeModel } from \"./NodeModel\";\nimport * as React from \"react\";\n\nexport class NodeFactory extends AbstractNodeFactory {\n\tconstructor() {\n\t\tsuper(\"trigger\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: NodeModel): JSX.Element {\n\t\treturn <NodeWidget node={node} classBaseName=\"square-node\" className=\"trigger-node\" />;\n\t}\n\n\tgetNewInstance() {\n\t\treturn new NodeModel();\n\t}\n}\n","import { LeftRightPort } from './../Ports';\n\nexport class PortModel extends LeftRightPort {\t\n\tconstructor(position: string = \"left\") {\n\t\tsuper(position, 'wait');\n\t}\n}\n","import { NodeModel as BaseNodeModel } from \"storm-react-diagrams\";\nimport { PortModel } from \"./PortModel\";\n\nexport class NodeModel extends BaseNodeModel {\n\tconstructor(element: object) {\n\t\tsuper(\"wait\");\n\t\t\n\t\tthis.name = element.title || 'Wait';\n\t\tthis.addPort(new PortModel(\"left\"));\n\t\tthis.addPort(new PortModel(\"right\"));\n\t}\n}\n","import * as React from \"react\";\nimport { PortWidget, DefaultPortLabel } from \"storm-react-diagrams\";\nimport { NodeModel } from \"./NodeModel\";\n\n\nexport interface NodeWidgetProps {\n\tnode: NodeModel;\n\tclassName: string;\n\tclassBaseName: string;\n}\n\nexport interface NodeWidgetState {}\n\nexport class NodeWidget extends React.Component<NodeWidgetProps, NodeWidgetState> {\n\tstatic defaultProps: NodeWidgetProps = {\n\t\tnode: null\n\t};\n\n\tconstructor(props: NodeWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tbem(selector: string): string {\n\t\treturn this.props.classBaseName + selector + \" \" + this.props.className + selector + \" \";\n\t}\n\n\tgetClassName() {\n\t\treturn this.props.classBaseName + \" \" +this.props.className;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={this.getClassName()} \n\t\t\t\tstyle={{ background: this.props.node.color }}>\t\t\t\t\n\t\t\t\t<div className=\"node-container\">\n\t\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t\t<div className={this.bem(\"__left\")}>\n\n\t\t\t\t\t\t\t<PortWidget name=\"left\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={this.bem(\"__right\")}>\n\t\t\t\t\t\t\t<PortWidget name=\"right\" node={this.props.node} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import {\n\tAbstractNodeFactory,\n\tDiagramEngine\n} from \"storm-react-diagrams\";\n\nimport { NodeWidget } from \"./NodeWidget\";\nimport { NodeModel } from \"./NodeModel\";\nimport * as React from \"react\";\n\nexport class NodeFactory extends AbstractNodeFactory {\n\tconstructor() {\n\t\tsuper(\"wait\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: NodeModel): JSX.Element {\n\t\treturn <NodeWidget node={node} classBaseName=\"round-node\" className=\"wait-node\" />;\n\t}\n\n\tgetNewInstance() {\n\t\treturn new NodeModel();\n\t}\n}\n","import {\n\tDiagramEngine,\n\tDiagramModel,\n\tDefaultNodeModel,\n\tLinkModel,\n\tNodeModel\n\t// LinkModel,\n\t// DefaultPortModel,\n\t// DiagramWidget\n} from \"storm-react-diagrams\";\n\nimport * as _ from \"lodash\";\n\n// import the custom models\nimport {\n    SimplePortFactory,\n    Action,\n    Segment,\n    Trigger,\n    Wait\n} from \"./elements\";\n\nimport \"./sass/main.scss\";\n\nexport class Application {\n\tactiveModel: DiagramModel;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = new DiagramEngine();\n\t\tthis.diagramEngine.installDefaultFactories();\n\t\tthis.activeModel = new DiagramModel();\n\n\t\t// this.activeModel.setGridSize(50);\n\n\t\tthis.payload = {\n\t\t\ttriggers: [\n\t\t\t\t{\t\n\t\t\t\t\tid: 'abcd',\n\t\t\t\t\ttitle: 'On event registration',\n\t\t\t\t\ttype: 'event',\n\t\t\t\t\tevent: {\n\t\t\t\t\t\tname: 'registration'\n\t\t\t\t\t},\n\t\t\t\t\telements: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'abcd1',\n\t\t\t\t\t\t\ttitle: 'Wait (1 minute)',\n\t\t\t\t\t\t\ttype: 'wait',\n\t\t\t\t\t\t\twait: {\n\t\t\t\t\t\t\t\tminutes: 5,\n\t\t\t\t\t\t\t\tdescendants: [\n\t\t\t\t\t\t\t\t\t'abcd12', //FIXME: uuids or element objects? \n\t\t\t\t\t\t\t\t\t'abcd12'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'abcd2',\n\t\t\t\t\t\t\ttitle: 'Segment 1',\n\t\t\t\t\t\t\ttype: 'segment',\n\t\t\t\t\t\t\tsegment: {\n\t\t\t\t\t\t\t\tcode: 'segment1',\n\t\t\t\t\t\t\t\tdescendants_positive: [\n\t\t\t\t\t\t\t\t\t'abcd21', //FIXME: uuids or element objects? \n\t\t\t\t\t\t\t\t\t'abcd22'\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdescendants_negative: [\n\t\t\t\t\t\t\t\t\t'abcd23', //FIXME: uuids or element objects? \n\t\t\t\t\t\t\t\t\t'abcd24'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'abcd3',\n\t\t\t\t\t\t\ttitle: 'Send registration email',\n\t\t\t\t\t\t\ttype: 'action',\n\t\t\t\t\t\t\taction: {\n\t\t\t\t\t\t\t\ttype: 'email',\n\t\t\t\t\t\t\t\temail: {\n\t\t\t\t\t\t\t\t\tcode: 'mail_template_123'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescendants:  [\n\t\t\t\t\t\t\t\t\t'abcd31', //FIXME: uuids or element objects? \n\t\t\t\t\t\t\t\t\t'abcd32'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t}\n\t\t\t],\n\t\t\t// FIXME: other elements?\n\t\t\tvisual: {\n\t\t\t\t'abcd': {\n\t\t\t\t\tx: 100,\n\t\t\t\t\ty: 150\n\t\t\t\t},\n\t\t\t\t'abcd1': {\n\t\t\t\t\tx: 400,\n\t\t\t\t\ty: 150\n\t\t\t\t},\n\t\t\t\t'abcd2': {\n\t\t\t\t\tx: 400,\n\t\t\t\t\ty: 300\n\t\t\t\t},\n\t\t\t\t'abcd3': {\n\t\t\t\t\tx: 400,\n\t\t\t\t\ty: 25\n\t\t\t\t},\n\t\t\t}\n\t\t};\n\n\t\tthis.registerModels();\n\t\tthis.renderPayload();\n\n\t\tthis.diagramEngine.setDiagramModel(this.activeModel);\n\t}\n\n\tregisterModels() {\n\t\tthis.diagramEngine.registerPortFactory(new SimplePortFactory(\"action\", config => new Action.PortModel()));\n\t\tthis.diagramEngine.registerNodeFactory(new Action.NodeFactory());\n\t\t\n\t\tthis.diagramEngine.registerPortFactory(new SimplePortFactory(\"segment\", config => new Segment.PortModel()));\n\t\tthis.diagramEngine.registerNodeFactory(new Segment.NodeFactory());\n\n\t\tthis.diagramEngine.registerPortFactory(new SimplePortFactory(\"trigger\", config => new Trigger.PortModel()));\n\t\tthis.diagramEngine.registerNodeFactory(new Trigger.NodeFactory());\n\n\t\tthis.diagramEngine.registerPortFactory(new SimplePortFactory(\"wait\", config => new Wait.PortModel()));\n\t\tthis.diagramEngine.registerNodeFactory(new Wait.NodeFactory());\n\t}\n\n\trenderPayload() {\n\t\tconst nodes = _.flatMap(this.payload.triggers, ((trigger) => {\n\t\t\tconst nodes = [];\n\t\t\tconst triggerVisual = this.payload.visual[trigger.id];\n\n\t\t\tconst triggerNode = new Trigger.NodeModel(trigger); //trigger.title, trigger.event.name\n\t\t\ttriggerNode.setPosition(triggerVisual.x, triggerVisual.y);\n\n\n\t\t\tconst elementNodes = trigger.elements.map((element) => {\n\t\t\t\tlet node = null;\n\t\t\t\tconst visual = this.payload.visual[element.id];\n\n\t\t\t\tif(element.type === 'action') {\n\t\t\t\t\tnode = new Action.NodeModel(element);\n\t\t\t\t} else if(element.type === 'segment') {\n\t\t\t\t\tnode = new Segment.NodeModel(element);\n\t\t\t\t} else if(element.type === 'wait') {\n\t\t\t\t\tnode = new Wait.NodeModel(element);\n\t\t\t\t}\n\n\t\t\t\tnode.setPosition(visual.x, visual.y);\n\n\t\t\t\treturn node;\n\t\t\t});\n\n\t\t\tconst links = elementNodes.map(function(element) {\n\t\t\t\treturn triggerNode.getPort(\"right\").link(element.getPort(\"left\"));\n\t\t\t})\n\n\n\t\t\treturn [ triggerNode, ...elementNodes, ...links ];\n\t\t}));\n\n\t\t//FIXME?\n\t\t// console.log(nodes);\n\t\t// const models = this.activeModel.addAll(nodes);\n\n\n\t\tnodes.forEach(model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.activeModel.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.activeModel.addNode(model);\n\t\t\t}\n\t\t});\n\n\t\t// nodes.forEach(item => {\n\t\t// \titem.addListener({\n\t\t// \t\tselectionChanged: console.log('selectionChanged')\n\t\t// \t});\n\t\t// });\n\t}\n\n\tgetActiveDiagram(): DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tgetDiagramEngine(): DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}\n","import * as React from \"react\";\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nexport interface TrayItemWidgetState {}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps, TrayItemWidgetState> {\n\tconstructor(props: TrayItemWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{ borderColor: this.props.color }}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={event => {\n\t\t\t\t\tevent.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\"\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\n\nimport { \n\tDiagramWidget,\n\tDiagramProps,\n\tLinkModel,\n\tNodeModel\n} from \"storm-react-diagrams\";\n\nimport { TrayWidget } from \"./TrayWidget\";\nimport { Application } from \"./../Application\";\nimport { TrayItemWidget } from \"./TrayItemWidget\";\n\nimport {\n\tAction,\n\tSegment,\n\tTrigger,\n\tWait\n} from \"./../elements\";\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport interface BodyWidgetState {}\n\nexport class BodyWidget extends React.Component<BodyWidgetProps, BodyWidgetState> {\n\tconstructor(props: BodyWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\n\tcloneSelected = () => {\n\t\tconst engine = this.props.app.getDiagramEngine();\n\t\tlet offset = { x: 0, y: 100 };\n\t\tlet model = engine.getDiagramModel();\n\n\t\tlet itemMap = {};\n\t\t_.forEach(model.getSelectedItems(), (item: BaseModel<any>) => {\n\t\t\tlet newItem = item.clone(itemMap);\n\n\t\t\t// offset the nodes slightly\n\t\t\tif (newItem instanceof NodeModel) {\n\t\t\t\tnewItem.setPosition(newItem.x + offset.x, newItem.y + offset.y);\n\t\t\t\tmodel.addNode(newItem);\n\t\t\t} else if (newItem instanceof LinkModel) {\n\t\t\t\t// offset the link points\n\t\t\t\tnewItem.getPoints().forEach(p => {\n\t\t\t\t\tp.updateLocation({ x: p.getX() + offset.x, y: p.getY() + offset.y });\n\t\t\t\t});\n\t\t\t\tmodel.addLink(newItem);\n\t\t\t}\n\t\t\tnewItem.selected = false;\n\t\t});\n\n\t\tthis.forceUpdate();\n\t}\n\n\trender() {\n\n\t\tconst diagramProps = {\n\t\t\tclassName: \"srd-demo-canvas\",\n\t\t\tdiagramEngine: this.props.app.getDiagramEngine(),\n\t\t\tmaxNumberPointsPerLink: 0,\n\t\t\tallowLooseLinks: false,\n\n\t\t\t// allowCanvasTranslation: false,\n\t\t\t// allowCanvasZoom: false\n\t\t}; // as DiagramProps;\n\n\t\treturn (\n\t\t\t<div className=\"body\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div className=\"title\">Storm React Diagrams - Demo 5</div>&nbsp;\n\t\t\t\t\t<button onClick={() => this.props.app.getDiagramEngine().zoomToFit()}>Zoom to fit</button>&nbsp;\n\t\t\t\t\t<button onClick={this.cloneSelected}>Clone Selected</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TrayWidget>\n\n\t\t\t\t\t\t<TrayItemWidget \n\t\t\t\t\t\t\tmodel={{ type: \"trigger\" }} \n\t\t\t\t\t\t\tname=\"Trigger\" \n\t\t\t\t\t\t\tcolor=\"rgb(0,192,255)\" \n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<TrayItemWidget \n\t\t\t\t\t\t\tmodel={{ type: \"segment\" }} \n\t\t\t\t\t\t\tname=\"Segment\" \n\t\t\t\t\t\t\tcolor=\"rgb(0,192,255)\" \n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<TrayItemWidget \n\t\t\t\t\t\t\tmodel={{ type: \"wait\" }} \n\t\t\t\t\t\t\tname=\"Wait\" \n\t\t\t\t\t\t\tcolor=\"rgb(0,192,255)\" \n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<TrayItemWidget \n\t\t\t\t\t\t\tmodel={{ type: \"action\" }} \n\t\t\t\t\t\t\tname=\"Action\" \n\t\t\t\t\t\t\tcolor=\"rgb(192,255,0)\" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === \"action\") {\n\t\t\t\t\t\t\t\tnode = new Action.NodeModel(\"Node \" + (nodesCount + 1), \"rgb(192,255,0)\");\n\t\t\t\t\t\t\t} else if(data.type === \"segment\") {\n\t\t\t\t\t\t\t\tnode = new Segment.NodeModel(\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t} else if(data.type === \"trigger\") {\n\t\t\t\t\t\t\t\tnode = new Trigger.NodeModel(\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t} else if(data.type === \"wait\") {\n\t\t\t\t\t\t\t\tnode = new Wait.NodeModel(\"Node \" + (nodesCount + 1), \"rgb(0,192,255)\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar points = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getDiagramModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiagramWidget {...diagramProps}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { BodyWidget } from \"./components/widgets/BodyWidget\";\nimport { Application } from \"./components/Application\";\n\nclass App extends Component {\n  \n\n  render() {\n    var app = new Application();\n\n    return <BodyWidget app={app} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}